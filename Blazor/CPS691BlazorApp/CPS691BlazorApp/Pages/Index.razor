@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime;

<PageTitle>Index</PageTitle>

<h1>Bouncing Balls</h1>

<form class="mb-5">
    <div class="form-group mb-3">
        <label for="nbAnimations">Number of animations</label>
        <input id="nbAnimations" name="nbAnimations" min="1" max="99999" @bind-value=NbAnimations type="number" />
    </div>
    @* <div class="form-group mb-3">
        <label for="nbTests">Number of tests</label>
        <input id="nbTests" name="nbTests" min="1" max="9" @bind-value=NbTests type="number" />
    </div> *@
    <div class="form-group mb-3">
        <label for="duration">Test duration (in seconds)</label>
        <input id="duration" name="duration" min="1" max="999" @bind-value=Duration type="number" />
    </div>
    <div>
        <button class="btn btn-success" @onclick="Start" @onclick:preventDefault="true" @onclick:stopPropagation="true">Start test</button>
        <button class="btn btn-danger" @onclick="Stop2" @onclick:preventDefault="true" @onclick:stopPropagation="true">Stop test</button>
        @* <button class="btn btn-danger">Decrease speed</button>
        <button class="btn btn-success">Increase speed</button> *@
    </div>
</form>

<div id="canvasHolder" style="position: fixed; background-color: white; width: 80%; height: 80%">
    <BECanvas Width="900" Height="400" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private Models.Field BallField = new Models.Field();

    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;

    private DateTime LastRender;

    private int NbAnimations { get; set; } = 200;

    private int NbTests { get; set; } = 3;

    private int Duration { get; set; } = 60;

    private async Task Start()
    {
        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
    }

    private async void Stop()
    {
        await JsRuntime.InvokeAsync<object>("stopRenderJS");
    }

    private async Task Stop2()
    {
        await Task.Delay(Duration * 1000);
        await JsRuntime.InvokeAsync<object>("stopRenderJS");
    }

    [JSInvokable]
    public void ResizeInBlazor(double width, double height) => BallField.Resize(width, height);

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        if (BallField.Balls.Count == 0)
            BallField.AddRandomBalls(NbAnimations);

        double fps = 1.0 / (DateTime.Now - LastRender).TotalSeconds;
        LastRender = DateTime.Now;

        BallField.StepForward();

        await this.ctx.BeginBatchAsync();

        await this.ctx.ClearRectAsync(0, 0, BallField.Width, BallField.Height);
        await this.ctx.SetFillStyleAsync("#FFFFFF");
        await this.ctx.FillRectAsync(0, 0, BallField.Width, BallField.Height);

        await this.ctx.SetFontAsync("26px Segoe UI");
        await this.ctx.SetFillStyleAsync("#000000");
        await this.ctx.FillTextAsync("Bouncing Balls", 10, 30);

        await this.ctx.SetFontAsync("16px consolas");
        await this.ctx.FillTextAsync($"FPS: {fps:0.000}", 10, 50);

        await this.ctx.SetStrokeStyleAsync("#000000");
        foreach (var ball in BallField.Balls)
        {
            await this.ctx.BeginPathAsync();
            await this.ctx.ArcAsync(ball.X, ball.Y, ball.R, 0, 2 * Math.PI, false);
            await this.ctx.SetFillStyleAsync(ball.Color);
            await this.ctx.FillAsync();
            await this.ctx.StrokeAsync();
        }

        await this.ctx.EndBatchAsync();
        Console.WriteLine($"{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")} - FPS: {fps:0.000}");
        await Stop2();
    }
}