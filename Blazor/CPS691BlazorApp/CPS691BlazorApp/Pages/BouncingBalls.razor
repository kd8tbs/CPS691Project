@page "/bouncingballs"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime;

<PageTitle>Bouncing Balls</PageTitle>

<div style="text-align: center">
    <h1 class="mb-5">Bouncing Balls</h1>    

    <div id="canvasHolder">
        <BECanvas Width="900" Height="400" @ref="_canvasReference"></BECanvas>
    </div>

    <form class="mb-5 mt-5">
        <div class="form-group mb-3">
            <label for="nbAnimations">Number of animations</label>
            <input id="nbAnimations" name="nbAnimations" min="1" max="99999" @bind-value=NbAnimations type="number" />
        </div>
        <div class="form-group mb-3">
            <label for="animationSpeed">Animation speed</label>
            <input id="animationSpeed" name="animationSpeed" min="1" max="99999" @bind-value=Speed type="number" />
        </div>
        @* <div class="form-group mb-3">
        <label for="duration">Test duration (in seconds)</label>
        <input id="duration" name="duration" min="1" max="999" @bind-value=Duration type="number" />
        </div> *@
        <div>
            <button class="btn btn-success" @onclick="Start" @onclick:preventDefault="true" @onclick:stopPropagation="true">Start test</button>
            <button class="btn btn-danger" @onclick="Stop" @onclick:preventDefault="true" @onclick:stopPropagation="true">Stop test</button>
        </div>
    </form>
</div>

@code {
    private Models.Field BallField = new Models.Field();

    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;

    private DateTime LastRender;

    private int NbAnimations { get; set; } = 200;

    private int Duration { get; set; } = 60;

    private int Speed { get; set; } = 5;

    private async Task Start()
    {
        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
    }

    private async void Stop()
    {
        await JsRuntime.InvokeAsync<object>("stopRenderJS");
    }

    private async Task StopWithDelay()
    {
        await Task.Delay(Duration * 1000);
        await JsRuntime.InvokeAsync<object>("stopRenderJS");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public void ResizeInBlazor(double width, double height) => BallField.Resize(width, height);

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        if (BallField.Balls.Count == 0)
            BallField.AddRandomBalls(NbAnimations, Speed);

        double fps = 1.0 / (DateTime.Now - LastRender).TotalSeconds;
        LastRender = DateTime.Now;

        BallField.StepForward();

        await this.ctx.BeginBatchAsync();

        await this.ctx.ClearRectAsync(0, 0, BallField.Width, BallField.Height);
        await this.ctx.SetFillStyleAsync("#FFFFFF");
        await this.ctx.FillRectAsync(0, 0, BallField.Width, BallField.Height);

        await this.ctx.SetStrokeStyleAsync("#000000");
        foreach (var ball in BallField.Balls)
        {
            await this.ctx.BeginPathAsync();
            await this.ctx.ArcAsync(ball.X, ball.Y, ball.R, 0, 2 * Math.PI, false);
            await this.ctx.SetFillStyleAsync(ball.Color);
            await this.ctx.FillAsync();
            await this.ctx.StrokeAsync();
        }

        await this.ctx.EndBatchAsync();
        Console.WriteLine($"{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")} - FPS: {fps:0.000}");
        //await StopWithDelay();
    }
}