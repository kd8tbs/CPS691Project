@page "/fadingsquares"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime;

<PageTitle>Index</PageTitle>

<h1>Fading Squares</h1>

<form class="mb-5">
    <div class="form-group mb-3">
        <label for="nbAnimations">Number of animations</label>
        <input id="nbAnimations" name="nbAnimations" min="1" max="99999" @bind-value=NbAnimations type="number" />
    </div>
    <div class="form-group mb-3">
        <label for="duration">Test duration (in seconds)</label>
        <input id="duration" name="duration" min="1" max="999" @bind-value=Duration type="number" />
    </div>
    <div>
        <button class="btn btn-success" @onclick="Start" @onclick:preventDefault="true" @onclick:stopPropagation="true">Start test</button>
        <button class="btn btn-danger" @onclick="Stop" @onclick:preventDefault="true" @onclick:stopPropagation="true">Stop test</button>
    </div>
</form>

<div id="canvasHolder" style="position: fixed; background-color: white; width: 80%; height: 80%">
    <BECanvas Width="900" Height="400" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private Models.SquareField SquareField = new Models.SquareField();

    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;

    private DateTime LastRender;

    private int NbAnimations { get; set; } = 200;

    private int NbTests { get; set; } = 3;

    private int Duration { get; set; } = 60;

    private async Task Start()
    {
        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
    }

    private async void Stop()
    {
        await JsRuntime.InvokeAsync<object>("stopRenderJS");
    }

    private async Task StopWithDelay()
    {
        await Task.Delay(Duration * 1000);
        await JsRuntime.InvokeAsync<object>("stopRenderJS");
    }

    [JSInvokable]
    public void ResizeInBlazor(double width, double height) => SquareField.Resize(width, height);

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        if (SquareField.Squares.Count == 0)
            SquareField.AddRandomSquares(NbAnimations);

        double fps = 1.0 / (DateTime.Now - LastRender).TotalSeconds;
        LastRender = DateTime.Now;

        SquareField.StepForward();

        await this.ctx.BeginBatchAsync();

        await this.ctx.ClearRectAsync(0, 0, SquareField.Width, SquareField.Height);
        await this.ctx.SetFillStyleAsync("#FFFFFF");
        await this.ctx.FillRectAsync(0, 0, SquareField.Width, SquareField.Height);

        await this.ctx.SetStrokeStyleAsync("#000000");
        foreach (var square in SquareField.Squares)
        {
            await this.ctx.BeginPathAsync();
            await this.ctx.RectAsync(square.X, square.Y, 20, 20);
            await this.ctx.SetFillStyleAsync(square.Color);
            await this.ctx.SetGlobalAlphaAsync(square.Opacity);
            await this.ctx.FillAsync();
            await this.ctx.StrokeAsync();
        }        

        await this.ctx.EndBatchAsync();
        Console.WriteLine($"{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")} - FPS: {fps:0.000}");
        await StopWithDelay();
    }
}